#!/usr/bin/python3
# -*- coding: utf-8 -*-
import json
import codecs

from pypinyin import lazy_pinyin # https://pypi.python.org/pypi/pypinyin

from exception import EmptyEnter, EnterNotInRange, EnterNotDigit

def parse_json(path):
	'''parse json generated by spider
	and return the list

	Arguments:
		path {string} -- the file path.

	Returns:
		content {dict} -- the content of this json
	'''
	file = codecs.open(path, 'rb+', encoding='utf-8')
	content = json.loads(file.read())
	file.close()
	return content

def write_json(path, data):
	''' Backup data 

	Arguments:
		path {string} -- the file path.
		data {dict} -- the data you want to write into json file.
	'''
	file = codecs.open(path, 'wb+', encoding='utf-8')
	line = json.dumps(data, ensure_ascii=False)
	file.write(line)
	file.close()

def remove_spaces(string):
	'''remove the all spaces in the string
	
	Arguments:
		string {string} -- the string include space characters.
	
	Returns:
		removed_string {string} -- the string be removed all space characters.
	'''
	string = string.replace('　', ' ')
	removed_string = ''.join(string.split())
	return removed_string

def check_input_digit(from_range, to_range, enter):
	'''check the user input problems
	1. check the input is empty or not
	2. check the input is digit or not
	3. check the inpur is in range or not
	
	Arguments:
		from {int} -- input range from
		to_range {int} -- input range to
		enter {string} -- user input
	'''
	# check the input is empty or not
	if not enter:
		raise EmptyEnter('===> 輸入為空!\n')
	# check the input is digit or not
	if not enter.isdigit():
		raise EnterNotDigit('===> 輸入非全純數字!\n')
	# check the inpur is in range or not
	enter_digit = int(enter)
	if enter_digit < from_range or enter_digit > to_range:
		raise EnterNotInRange('===> 輸入的數字 ' + enter + ', 非介於 ' + str(from_range) + '~' + str(to_range) + ' 之間!\n')

def pinyin_y_max(ch_str_x, ch_str_y):
	list_x = lazy_pinyin(ch_str_x)
	list_y = lazy_pinyin(ch_str_y)
	length = 0
	if len(list_x) <= len(list_y):
		length = len(list_x)
	else:
		length = len(list_y)
	flag = True
	same = False
	for i in range(0, length):
		if list_x[i][0] > list_y[i][0]:
			flag =  False
			break
		elif list_x[i][0] == list_y[i][0]:
			same = True
			continue
		else:
			flag = True
			break
	if same:
		if len(list_x) == len(list_y):
			flag = False
		elif len(list_x) > len(list_y):
			flag = False
		else:
			flag = True
	return flag

def pinyin(ch_str):
	list_pinyin = lazy_pinyin(ch_str)
	string = ''
	for i in list_pinyin:
		string += i[0]
	return string

def y_max(x, y, compare_rule_func=None):
	'''compare who is max
	
	if compare_rule_func is none, then use general rule to compare
	or, use the compare_rule_func to compare
	
	Keyword Arguments:
		compare_rule_func {function(x, y)} -- special rule function to compare (default: {None})
	'''
	if compare_rule_func == None:
		if x > y:
			return False
		else:
			return True
	else:
		if compare_rule_func(x, y):
			return True
		else:
			return False

def quick_sort(sort_list, compare_rule_func=None):
	if sort_list == []:
		return sort_list
	left_list = []
	right_list = []
	middle_item = sort_list[0]
	for item in sort_list[1:]:
		if y_max(item, middle_item, compare_rule_func=compare_rule_func):
			left_list.append(item)
		else:
			right_list.append(item)
	return quick_sort(left_list) + [middle_item] + quick_sort(right_list)

def dict_to_list(unsorted_dict):
	keys = unsorted_dict.keys()
	vals = unsorted_dict.values()
	to_list = [(key, val) for key, val in zip(keys, vals)]

	return to_list

def sorted_dict_by_key_to_list(unsorted_dict, reverse=False):
	return sorted(dict_to_list(unsorted_dict), key=lambda x:x[0], reverse=reverse)

# if __name__ == '__main__':
	# test_list = [1, 4, 5, 3, 2, 99, 1]
	# test_list = quick_sort(test_list)
	# print(test_list)

	# test_dict = {'3': ['3', '3', '3'], '2': '2', '1': '1'}
	# print(test_dict)
	# test_dict_list = sorted_dict_by_key_to_list(test_dict)
	# print(test_dict_list)